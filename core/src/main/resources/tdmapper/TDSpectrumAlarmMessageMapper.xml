<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.figure.core.tdrepository.TDSpectrumAlarmMessageMapper">

    <resultMap id="SpectrumAlarmMessageResult" type="com.figure.core.model.spectrum.SpectrumAlarmMessage">
        <result property="alarmId" column="alarmId"/>
        <result property="alarmType" column="alarmType"/>
        <result property="serviceCode" column="serviceCode"/>
        <result property="serviceName" column="serviceName"/>
        <result property="spectrumCode" column="spectrumCode"/>
        <result property="spectrumName" column="spectrumName"/>
        <result property="centerFrequency" column="centerFrequency"/>
        <result property="frequencySpan" column="frequencySpan"/>
        <result property="level" column="level"/>
        <result property="CNR" column="CNR"/>
        <result property="startFrequency" column="startFrequency"/>
        <result property="endFrequency" column="endFrequency"/>
        <result property="startTime" column="startTime"/>
        <result property="endTime" column="endTime"/>
        <result property="alarmDuration" column="alarmDuration"/>
        <result property="alarmFlag" column="alarmFlag"/>
        <result property="lastUpdateTime" column="lastUpdateTime"/>
        <result property="commitFlag" column="commitFlag"/>
        <result property="commitInfo" column="commitInfo"/>
        <result property="createUserId" column="createUserId"/>
        <result property="createTime" column="createTime"/>
        <result property="updateUserId" column="updateUserId"/>
        <result property="updateTime" column="updateTime"/>
        <result property="isDelete" column="isDelete"/>
    </resultMap>

    <insert id="saveEntity" parameterType="com.figure.core.model.spectrum.SpectrumAlarmMessage">
        insert into spectrum_alarm_message_#{spectrumCode} using spectrum_alarm_message
            TAGS (#{serviceCode}, #{serviceName}, #{spectrumCode}, #{spectrumName})
            (createTime, alarmType, centerFrequency, frequencySpan, `level`, CNR, startFrequency, endFrequency,
             startTime, endTime, alarmDuration, alarmFlag, lastUpdateTime, commitFlag, commitInfo, alarmId)
            values (#{createTime}, #{alarmType}, #{centerFrequency}, #{frequencySpan}, #{level}, #{CNR}, #{startFrequency}, #{endFrequency},
                #{startTime},
                #{endTime}
              , #{alarmDuration}, #{alarmFlag}, #{lastUpdateTime}, #{commitFlag}, #{commitInfo}, #{alarmId})
    </insert>

    <select id="listByWrapper" resultType="com.figure.core.model.spectrum.SpectrumAlarmMessage" parameterType="com.figure.core.model.spectrum.SpectrumAlarmMessage">
        select alarmId,
        alarmType,
        serviceCode,
        serviceName,
        spectrumCode,
        spectrumName,
        centerFrequency,
        frequencySpan,
        level,
        CNR,
        startFrequency,
        endFrequency,
        startTime,
        endTime,
        alarmDuration,
        alarmFlag,
        lastUpdateTime,
        commitFlag,
        commitInfo,
        createTime
        from spectrum_alarm_message#{tableName}
        <if test="ew.emptyOfWhere == false">
            ${ew.customSqlSegment}
        </if>
    </select>

    <select id="selectEntityPage" resultType="com.figure.core.model.spectrum.SpectrumAlarmMessage">
        select alarmId,
        alarmType,
        serviceCode,
        serviceName,
        spectrumCode,
        spectrumName,
        centerFrequency,
        frequencySpan,
        level,
        CNR,
        startFrequency,
        endFrequency,
        startTime,
        endTime,
        alarmDuration,
        alarmFlag,
        lastUpdateTime,
        commitFlag,
        commitInfo,
        createTime
        from spectrum_alarm_message
        <if test="ew.emptyOfWhere == false">
            ${ew.customSqlSegment}
        </if>
        <if test="ew.emptyOfWhere == true">
            ${ew.sqlSegment}
        </if>
        <if test="size != null and offset !=null">
            LIMIT #{size} OFFSET #{offset}
        </if>
    </select>

    <select id="selectCount" resultType="int" >
        select count(*) from spectrum_alarm_message
        <if test="ew.emptyOfWhere == false">
            ${ew.customSqlSegment}
        </if>
    </select>
</mapper>